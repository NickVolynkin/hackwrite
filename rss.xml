<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hack.write()</title><link>http://hackwrite.com/</link><description>Writing about writing about development.</description><atom:link href="http://hackwrite.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 26 Jan 2017 15:32:38 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>DocOps Isn't Just the Fun Part</title><link>http://hackwrite.com/posts/docops-not-just-fun-part/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;p&gt;Somewhere in the last year I decided I was into &lt;em&gt;DocOps&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;What that really meant for me is that was into &lt;em&gt;Docs-as-code&lt;/em&gt;, which is a related trend, but not quite the same. I care about  things like single-source documents (DRY), version control, plain text editing, style linting, and automated deployment. I write little Python or Bash scripts to pipe tools together and customize the output of static site generators. I'm learning a lot, having a lot of fun, and finally weaving together a number of different skill sets and interests I've picked up over the years (writing, coding, project management).&lt;/p&gt;
&lt;p&gt;When I was the only writer at a startup, this was all really effective. I could fool myself into thinking I was &lt;em&gt;doing DocOps&lt;/em&gt;. And maybe I was, but only in that particular context.&lt;/p&gt;
&lt;p&gt;But now I work at a big, hulking enterprise company. And all of the sudden it is clear that DocOps isn't just the fun technology bits, just like how DevOps isn't just about knowing how to deploy Docker on Kubernetes. It's about dealing with people and dealing with organizations.&lt;/p&gt;
&lt;p&gt;I just want to stand up my docs somewhere. "Give me SSH access to a directory with a public URL." At the startup I just made a decision and had live docs published my second or third day there. At the enterprise? Not so simple. My tooling has to go through security checks. Engineers have to sign off on deployment processes. Customer service has a vested interest in how documents are delivered. Can we integrate to Salesforce knowledge base? How do I &lt;code&gt;pip install&lt;/code&gt; from behind a firewall?&lt;/p&gt;
&lt;p&gt;If I'm &lt;em&gt;into DocOps&lt;/em&gt;, this is what I'm into. Not just hacking on writing tools (as much fun as that is), but also being effective in an organization. I was very effective in a startup, where hacking on things was how the organization operated. Now I have to level up and learn how to be effective at scale.&lt;/p&gt;</description><guid>http://hackwrite.com/posts/docops-not-just-fun-part/</guid><pubDate>Thu, 26 Jan 2017 14:56:30 GMT</pubDate></item><item><title>The Real Reason I Love Static Site Generators</title><link>http://hackwrite.com/posts/real-reason-i-love-static-site-generators/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;p&gt;There's a lot to like about &lt;a href="https://www.staticgen.com/"&gt;static site generators&lt;/a&gt; like &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, &lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt;, and &lt;a href="http://www.sphinx-doc.org/"&gt;Sphinx&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hosting is much simpler, and can usually be done for free.&lt;/li&gt;
&lt;li&gt;Static sites are inherently more secure than dynamic ones.&lt;/li&gt;
&lt;li&gt;Very fast page load times.&lt;/li&gt;
&lt;li&gt;Authoring in a code editor that I have control over.&lt;/li&gt;
&lt;li&gt;Markdown and reStructured Text are both faster to type than HTML or rich content in a WYSIWYG editor.&lt;/li&gt;
&lt;li&gt;Version control.&lt;/li&gt;
&lt;li&gt;The ability to manage the build and deploy process like code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are probably more benefits I'm not thinking of at the moment. When I first started using Jekyll, my main motivation was wanting to simplify hosting and exert control over authoring. I discovered the other benefits along the way, and they have really changed my professional life.&lt;/p&gt;
&lt;p&gt;But I've realized there's one thing that has come to matter the most to me:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Static sites revive and make real the notion of a document on the web.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In database-backed CMSes, the pretty URL is a noble lie. Content is smeared around in a database and accessed through &lt;code&gt;?id=1234&lt;/code&gt; parameters or internal query mechanisms. This is fine, and really the only way to handle massive amounts of content.&lt;/p&gt;
&lt;p&gt;But the web was built to serve documents, not database results. In an age where content-as-data is on such hyperdrive that people think a &lt;a href="http://sennajs.com/examples/blog/"&gt;single-page app blog system&lt;/a&gt; is a reasonable idea, it is calming to use a technology that works the way the web was always supposed to work.&lt;/p&gt;
&lt;p&gt;And this has as much to do with the mental model as with the technology. (Maybe more.) The individual documents that make up a static site are handled &lt;em&gt;as documents&lt;/em&gt; before being processed to HTML. If I want to change the content on some blog post, I edit a file on my local computer. I don't have to log in and use an application. It is transparent, and there's a direct relationship between a single file in my source and a single URI on my site. Now it feels like the URI actually identifies a &lt;em&gt;resource&lt;/em&gt;, and is not just a cleverly-disguised search pattern.&lt;/p&gt;
&lt;p&gt;I understand why we moved past the web of documents. But if you're producing documents, maybe it's the right model.&lt;/p&gt;</description><guid>http://hackwrite.com/posts/real-reason-i-love-static-site-generators/</guid><pubDate>Wed, 25 Jan 2017 14:07:37 GMT</pubDate></item><item><title>File Names</title><link>http://hackwrite.com/posts/file-names/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;br&gt;
-- Phil Karlton&lt;/p&gt;
&lt;p&gt;I cannot help you with cache invalidation.&lt;br&gt;
-- Adam Michael Wood&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I recently saw a question about file names in the &lt;a href="https://www.facebook.com/groups/episcopalcommunicators/"&gt;Episcopal Communicators Facebook Group&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Question about file names." src="http://hackwrite.com/img/filename-question.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a question about filenames for websites.&lt;/p&gt;
&lt;p&gt;When we first developed our website, our consultant told me that when we put a file on there, it's important to give the file a date and a unique and descriptive name.&lt;/p&gt;
&lt;p&gt;While that works for some files, it doesn't for others. It caused me to end up with a lot of old files on my website.&lt;/p&gt;
&lt;p&gt;What I changed was that I stopped changing file names. So instead of mileage_rates_2016.pdf, I just call it mileage_rates.pdf. That way every link is correct, everywhere on the site.&lt;/p&gt;
&lt;p&gt;However, when we link to outside websites, like the wider church's site, we end up with obsolete links. Case in point: the Manual of Business Methods:&lt;/p&gt;
&lt;p&gt;We had full_manual_updated_09-30-2013.pdf.&lt;/p&gt;
&lt;p&gt;And now the link is full_manual_updated_012815_0.pdf&lt;/p&gt;
&lt;p&gt;Is there any need to give dates to files like this? It's important for the organization to archive old versions, but is there any need to have unique names so that websites like ours end up with older versions?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I summed a few file name best practices, but... I have &lt;em&gt;a lot&lt;/em&gt; to say about this topic. File naming is one of those weird little things I have irrationally strong feelings about, and the ubiquity of bad file naming practices is a constant source of rage in my life.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/file-names/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/file-names/</guid><pubDate>Fri, 20 Jan 2017 14:31:12 GMT</pubDate></item><item><title>What (and how much) to learn?</title><link>http://hackwrite.com/posts/what-and-how-much-to-learn/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;I recently wrote that you don't need to attain a high-level of coding skill for learning to code to be useful. A technical writer can see substantial ROI from just learning &lt;a href="http://hackwrite.com/posts/enough-to-be-dangerous/"&gt;enough to be dangerous&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Which raises (not begs!) the question: How much &lt;em&gt;is&lt;/em&gt; enough? What topics should tech writers know? And how well should we know them?&lt;/p&gt;
&lt;p&gt;To start answering that question, I'd like to expand what we mean by "learn to code" or "knowing how to code" to "developer skills" in general. Too much focus on &lt;em&gt;coding&lt;/em&gt; overlooks the other highly useful things that developers know and do that tech writers can benefit from.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/what-and-how-much-to-learn/"&gt;Read more…&lt;/a&gt; (11 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/what-and-how-much-to-learn/</guid><pubDate>Thu, 19 Jan 2017 14:30:00 GMT</pubDate></item><item><title>The Problem with Github Pages</title><link>http://hackwrite.com/posts/github-pages-problem/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;I love Github Pages. I run this blog, my &lt;a href="http://adammichaelwood.com"&gt;personal blog&lt;/a&gt;, and my &lt;a href="http://progressivesolemnity.org"&gt;music and liturgy blog&lt;/a&gt; on it. I used it to host &lt;a href="http://docs.botcentral.ai"&gt;documentation for my most recent tech writing gig&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a single writer with moderate or better technical skills looking for a simple hosting solution, it's amazing. But, I've recently realized there's a problem with it that makes it ill-suited for multiple collaborators working on complicated documentation. (Or even, as I discovered, a single writer on more than one machine.)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/github-pages-problem/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/github-pages-problem/</guid><pubDate>Tue, 10 Jan 2017 13:50:37 GMT</pubDate></item><item><title>Shipping</title><link>http://hackwrite.com/posts/shipping/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;My New Year's Resolution --- which I have so far held to --- is to write &lt;em&gt;and publish&lt;/em&gt; every day.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/shipping/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/shipping/</guid><pubDate>Mon, 09 Jan 2017 14:42:24 GMT</pubDate></item><item><title>Data Structures and Philosophy</title><link>http://hackwrite.com/posts/data-structures-and-philosophy/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;Sometimes bad programming is just bad programming: people write sloppy code, people don't know how things are supposed to work, people forget that binary math is weird sometimes.&lt;/p&gt;
&lt;p&gt;But often, bad programming is a result of bad philosophy - a fundamental misunderstanding of how meaning is made, or thought works, or how the world is structured. Sometimes the fault is a little less radical, tied to ignorance of some domain-specific facts, but often it's just plain bad philosophy.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/data-structures-and-philosophy/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/data-structures-and-philosophy/</guid><pubDate>Fri, 06 Jan 2017 15:26:34 GMT</pubDate></item><item><title>On the Design of this Blog</title><link>http://hackwrite.com/posts/on-the-design-of-this-blog/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;Since I spend almost my entire day in an editor, writing, I've put a bit of effort into getting it to look the way I like. The most important things for my writing experience are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dark theme&lt;/li&gt;
&lt;li&gt;oversized display font&lt;/li&gt;
&lt;li&gt;syntax highlighting&lt;/li&gt;
&lt;li&gt;relatively narrow text (&amp;lt; 80 column)&lt;/li&gt;
&lt;li&gt;centered text with a decent margin on each side&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is what my screen looks like when writing a blog post.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AMW Post in Editor" src="http://hackwrite.com/img/amw-post-in-editor.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/on-the-design-of-this-blog/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/on-the-design-of-this-blog/</guid><pubDate>Thu, 05 Jan 2017 14:29:14 GMT</pubDate></item><item><title>Overriding CSS/LESS Declaration to Reduce One LOC</title><link>http://hackwrite.com/posts/overriding-css-declaration-to-reduce-loc/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;While working on the theme for &lt;a href="http://hackwrite.com"&gt;this site&lt;/a&gt;, I was referencing &lt;a href="http://mrcoles.com/demo/markdown-css/"&gt;Markdown CSS&lt;/a&gt;, which makes HTML look like Markdown. (h/t &lt;a href="https://twitter.com/ericholscher"&gt;@ericholscher&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I &lt;a href="https://github.com/mrcoles/markdown-css/blob/master/markdown.less"&gt;ran across an interesting (let's call it a) pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/overriding-css-declaration-to-reduce-loc/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/overriding-css-declaration-to-reduce-loc/</guid><pubDate>Wed, 04 Jan 2017 13:50:39 GMT</pubDate></item><item><title>It Should Matter That It's You</title><link>http://hackwrite.com/posts/it-should-matter-that-its-you/</link><dc:creator>Adam Michael Wood</dc:creator><description>&lt;div&gt;&lt;p&gt;I grew up doing theatre, went to college for theatre, and taught theatre for a few years. Nearly all of my theatre experience --- as a performer, teacher, director, stagehand, designer, or even audience member --- was non-profit and the bulk was non-professional. High school, university, community, non-profit regional.&lt;/p&gt;
&lt;p&gt;I saw a lot of shows where it didn't seem to matter who had directed it, or who had designed it. So many high school and community theatre shows are bad reproductions of the professional version of the same show. Musicals, comedies, murder mysteries... musical comedy murder mysteries. Names the audience recognizes, with poorly built sets that look pretty much the same as every other production of the show, and costumes assembled from what seems like the same pile of thrift-store refuse.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hackwrite.com/posts/it-should-matter-that-its-you/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>http://hackwrite.com/posts/it-should-matter-that-its-you/</guid><pubDate>Tue, 03 Jan 2017 14:06:56 GMT</pubDate></item></channel></rss>